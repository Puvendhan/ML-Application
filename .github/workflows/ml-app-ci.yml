name: MLAPP - Build

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'artifacts/**'
      - 'tests/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - 'VERSION'
      - '.github/workflows/ml-app-ci.yaml'
  pull_request:
    paths:
      - 'app/**'
      - 'artifacts/**'
      - 'tests/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - 'VERSION'
      - '.github/workflows/ml-app-ci.yaml'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  IMAGE_BASE: europe-west2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/finden/ml-app

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '400.0.0'

      - name: Authenticate with Google Cloud
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        run: |
          echo "$GCP_CREDENTIALS" > $HOME/gcloud-key.json
          gcloud auth activate-service-account --key-file=$HOME/gcloud-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-key.json" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: Run unit tests
        run: pytest tests/unit

      - name: Run integration tests
        run: pytest tests/integration

      - name: Read version
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker europe-west2-docker.pkg.dev

      - name: Build and push Docker images
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          docker build -t $IMAGE_BASE:$VERSION .
          docker tag $IMAGE_BASE:$VERSION $IMAGE_BASE:$GITHUB_SHA
          docker push $IMAGE_BASE:$VERSION
          docker push $IMAGE_BASE:$GITHUB_SHA